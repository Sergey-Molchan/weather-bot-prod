from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
from telegram.ext import ConversationHandler
from datetime import datetime, timedelta
import logging
from telegram import InlineKeyboardMarkup
from bot.keyboards import (
    get_main_menu_keyboard,
    get_points_keyboard,
    get_weather_details_keyboard,
    get_back_to_weather_keyboard,
    get_thunder_check_keyboard
)
from bot.services import WeatherService
from bot.config import LOCATIONS_C_SECTOR, LOCATION_EAST_SECTOR, ALL_LOCATIONS
from bot.utils import format_weather_data

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_SECTOR, SELECTING_POINT, SHOWING_WEATHER = range(3)


class BotHandlers:
    def __init__(self, weather_service: WeatherService):
        self.weather_service = weather_service
        self.thunder_cache = {"status": None, "expires": None}

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = get_main_menu_keyboard()
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.message:
            await update.message.reply_text(
                "üèîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:",
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.edit_message_text(
                text="üèîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:",
                reply_markup=reply_markup
            )
        return SELECTING_SECTOR

    async def sector_selected(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()

        sector = query.data.split(":")[1]
        context.user_data['sector'] = sector

        if sector == "central":
            locations = LOCATIONS_C_SECTOR
        elif sector == "east":
            locations = LOCATION_EAST_SECTOR
        else:
            locations = ALL_LOCATIONS

        keyboard = get_points_keyboard(locations)
        await query.edit_message_text(
            text="üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:",
            reply_markup=keyboard
        )
        return SELECTING_POINT

    async def point_selected(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏"""
        query = update.callback_query
        await query.answer()

        point_name = query.data.split(":")[1]
        context.user_data['point'] = point_name

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏
        location = ALL_LOCATIONS.get(point_name)
        if not location:
            await query.edit_message_text(text="–û—à–∏–±–∫–∞: —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return SELECTING_SECTOR

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        data = await self.weather_service.get_weather_data(location)
        if not data:
            await query.edit_message_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
            return SELECTING_SECTOR

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        message = format_weather_data(data, point_name)

        keyboard = get_weather_details_keyboard()
        await query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return SHOWING_WEATHER

    async def tomorrow_forecast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏"""
        query = update.callback_query
        await query.answer()

        point_name = context.user_data.get('point')
        location = ALL_LOCATIONS.get(point_name)

        if not location:
            await query.edit_message_text(text="–û—à–∏–±–∫–∞: —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return SHOWING_WEATHER

        data = await self.weather_service.get_weather_data(location)
        if not data or 'forecast' not in data:
            await query.edit_message_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
            return SHOWING_WEATHER

        # –ë–µ—Ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å)
        if len(data['forecast']['forecastday']) < 2:
            await query.edit_message_text(text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return SHOWING_WEATHER

        forecast = data['forecast']['forecastday'][1]['day']

        message = (
            f"üìÖ **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è {point_name}**\n"
            f"‚Ä¢ –ú–∞–∫—Å: {forecast['maxtemp_c']}¬∞C\n"
            f"‚Ä¢ –ú–∏–Ω: {forecast['mintemp_c']}¬∞C\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {forecast['condition']['text']}\n"
            f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: {forecast['daily_chance_of_rain']}%\n"
            f"‚Ä¢ –£–§-–∏–Ω–¥–µ–∫—Å: {forecast['uv']}"
        )

        keyboard = get_back_to_weather_keyboard()
        await query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return SHOWING_WEATHER

    async def weather_alerts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –æ–ø–∞—Å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏"""
        query = update.callback_query
        await query.answer()

        point_name = context.user_data.get('point')
        location = ALL_LOCATIONS.get(point_name)

        if not location:
            await query.edit_message_text(text="–û—à–∏–±–∫–∞: —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return SHOWING_WEATHER

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–æ–∑—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–∏
        has_thunder = await self.weather_service.check_thunder_for_point(location)
        data = await self.weather_service.get_weather_data(location)
        alerts = self.weather_service.check_thunderstorm(data) if data else []

        message = f"‚ö†Ô∏è **–û–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è –¥–ª—è {point_name}**\n"

        if has_thunder:
            message += "‚õàÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥—Ä–æ–∑–∞!\n\n"

        if alerts:
            message += "üõë –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –≥—Ä–æ–∑–æ–≤–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞:\n"
            for alert in alerts[:3]:
                message += (
                    f"‚Ä¢ {alert['time']}: {alert['condition']}\n"
                    f"  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {alert['chance']}%, "
                    f"–í–µ—Ç–µ—Ä: {alert['wind']} –∫–º/—á\n"
                )
        else:
            message += "‚úÖ –û–ø–∞—Å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"

        keyboard = get_back_to_weather_keyboard()
        await query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SHOWING_WEATHER

    async def back_to_weather(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ–≥–æ–¥—ã –¥–ª—è —Ç–æ—á–∫–∏"""
        query = update.callback_query
        await query.answer()

        point_name = context.user_data.get('point')
        if not point_name:
            return await self.start(update, context)

        location = ALL_LOCATIONS.get(point_name)
        if not location:
            return await self.start(update, context)

        data = await self.weather_service.get_weather_data(location)
        if not data:
            return await self.start(update, context)

        message = format_weather_data(data, point_name)
        keyboard = get_weather_details_keyboard()
        await query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return SHOWING_WEATHER

    async def back_to_points(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–æ—á–µ–∫"""
        query = update.callback_query
        await query.answer()

        sector = context.user_data.get('sector', 'central')
        if sector == "central":
            locations = LOCATIONS_C_SECTOR
        elif sector == "east":
            locations = LOCATION_EAST_SECTOR
        else:
            locations = ALL_LOCATIONS

        keyboard = get_points_keyboard(locations)
        await query.edit_message_text(
            text="üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:",
            reply_markup=keyboard
        )
        return SELECTING_POINT

    async def back_to_main(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        return await self.start(update, context)

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
        await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω")
        return ConversationHandler.END

    async def check_thunder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–æ–∑—ã'"""
        query = update.callback_query
        await query.answer()

        try:
            if self.thunder_cache["expires"] and datetime.now() < self.thunder_cache["expires"]:
                thunder_status = self.thunder_cache["status"]
            else:
                has_thunder = await self.weather_service.check_thunder()
                thunder_status = "‚õàÔ∏è –ì—Ä–æ–∑—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!" if has_thunder else "üå§Ô∏è –ë–µ–∑ –≥—Ä–æ–∑"
                self.thunder_cache = {
                    "status": thunder_status,
                    "expires": datetime.now() + timedelta(minutes=15)
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä–æ–∑: {e}")
            thunder_status = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ"

        await query.edit_message_text(
            text=f"–°—Ç–∞—Ç—É—Å –≥—Ä–æ–∑: {thunder_status}",
            reply_markup=InlineKeyboardMarkup(get_thunder_check_keyboard())
        )
        return SELECTING_SECTOR

    def get_conversation_handler(self):
        return ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                SELECTING_SECTOR: [
                    CallbackQueryHandler(self.sector_selected, pattern=r"^sector:"),
                    CallbackQueryHandler(self.check_thunder, pattern=r"^check_thunder$"),
                ],
                SELECTING_POINT: [
                    CallbackQueryHandler(self.point_selected, pattern=r"^point:"),
                    CallbackQueryHandler(self.back_to_main, pattern=r"^back_to_main$")
                ],
                SHOWING_WEATHER: [
                    CallbackQueryHandler(self.tomorrow_forecast, pattern=r"^tomorrow_forecast$"),
                    CallbackQueryHandler(self.weather_alerts, pattern=r"^weather_alerts$"),
                    CallbackQueryHandler(self.back_to_points, pattern=r"^back_to_points$"),
                    CallbackQueryHandler(self.back_to_main, pattern=r"^back_to_main$"),
                    CallbackQueryHandler(self.back_to_weather, pattern=r"^back_to_weather$")
                ]
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
            allow_reentry=True
        )
