import os
import requests
import asyncio
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from datetime import datetime, timedelta
from dotenv import load_dotenv
import config

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ö–æ–¥—ã –ø–æ–≥–æ–¥—ã –¥–ª—è –≥—Ä–æ–∑—ã
THUNDERSTORM_CODES = [1087, 1273, 1276, 1279, 1282]


async def get_weather_alerts(location: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={location}&days=2&alerts=yes"
    response = requests.get(url)
    return response.json()


def check_thunderstorm(weather_data: dict):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –≥—Ä–æ–∑—ã"""
    alerts = []
    try:
        for day in weather_data['forecast']['forecastday']:
            for hour in day['hour']:
                if hour['condition']['code'] in THUNDERSTORM_CODES:
                    alert_time = datetime.strptime(hour['time'], "%Y-%m-%d %H:%M")
                    time_window = datetime.now() + timedelta(hours=config.ALERT_WINDOW)

                    if datetime.now() < alert_time < time_window:
                        alerts.append({
                            "time": alert_time.strftime('%H:%M %d.%m'),
                            "condition": hour['condition']['text'],
                            "chance": hour['chance_of_thunder'],
                            "precip": hour['precip_mm'],
                            "wind": hour['wind_kph']
                        })
    except KeyError:
        pass
    return alerts


async def send_alert(context: ContextTypes.DEFAULT_TYPE, location_name: str, alerts: list):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    message = (
        f"‚ö°Ô∏è **–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –ì–†–û–ó–ï: {location_name.upper()}** ‚ö°Ô∏è\n"
        f"*–ü–µ—Ä–∏–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:* {config.ALERT_WINDOW} —á\n"
    )

    for alert in alerts:
        message += (
            f"\n‚ñ´Ô∏è *{alert['time']}*: {alert['condition']}\n"
            f"  - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {alert['chance']}%\n"
            f"  - –û—Å–∞–¥–∫–∏: {alert['precip']} –º–º/—á\n"
            f"  - –í–µ—Ç–µ—Ä: {alert['wind']} –∫–º/—á\n"
        )

    await context.bot.send_message(
        chat_id=CHANNEL_ID,
        text=message,
        parse_mode="Markdown"
    )


async def auto_check(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π"""
    for name, coords in config.ALL_LOCATIONS.items():
        try:
            data = await get_weather_alerts(coords)
            alerts = check_thunderstorm(data)

            if alerts:
                await send_alert(context, name, alerts)
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                await asyncio.sleep(2)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–ª—è {name}: {str(e)}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = []
    for sector_name in config.SECTORS:
        keyboard.append([InlineKeyboardButton(sector_name, callback_data=f"sector:{sector_name}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üå©Ô∏è –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä–æ–∑\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
        reply_markup=reply_markup
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith("sector:"):
        sector_name = query.data.split(":")[1]
        locations = config.SECTORS[sector_name]

        await query.edit_message_text(f"‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é {sector_name}...")

        results = []
        for name, coords in locations.items():
            try:
                data = await get_weather_alerts(coords)
                alerts = check_thunderstorm(data)

                if alerts:
                    result = f"‚ö°Ô∏è *{name}:*"
                    for alert in alerts:
                        result += f"\n‚ñ´Ô∏è {alert['time']} - {alert['condition']} ({alert['chance']}%)"
                    results.append(result)
                else:
                    results.append(f"‚úÖ *{name}:* –ì—Ä–æ–∑—ã –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è")

                # –ü–∞—É–∑–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                await asyncio.sleep(1)

            except Exception as e:
                results.append(f"‚ùå *{name}:* –û—à–∏–±–∫–∞ ({str(e)})")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ ({sector_name}):*\n\n" + "\n\n".join(results)
        await query.message.reply_text(
            text=message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    job_queue = application.job_queue
    job_queue.run_repeating(
        auto_check,
        interval=config.CHECK_INTERVAL,
        first=10
    )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
