import os
import logging
import requests
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OWM_API_KEY = os.getenv("OWM_API_KEY")

# –°—Ç–∞–±–∏–ª—å–Ω–∞—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é)
STABLE_LOCATION = {
    "name": "–ì–æ—Ä–Ω—ã–π –∫—É—Ä–æ—Ä—Ç '–í—ã—Å–æ—Ç–∞ 1500'",
    "lat": 43.6440174,  # –®–∏—Ä–æ—Ç–∞
    "lon": 40.2552175,  # –î–æ–ª–≥–æ—Ç–∞
    "elevation": 2050  # –í—ã—Å–æ—Ç–∞ –≤ –º–µ—Ç—Ä–∞—Ö
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = [
    ["üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞"],
    ["‚ö†Ô∏è –ì—Ä–æ–∑–æ–≤—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "üìä –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_weather_forecast():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API 2.5
        url = f"https://api.openweathermap.org/data/2.5/onecall?lat={STABLE_LOCATION['lat']}&lon={STABLE_LOCATION['lon']}&exclude=minutely&appid={OWM_API_KEY}&units=metric&lang=ru"

        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫: {url.split('appid')[0]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –±–µ–∑ –∫–ª—é—á–∞

        response = requests.get(url, timeout=10)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫
        if response.status_code == 401:
            logger.error("–û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á OpenWeatherMap")
            return None
        elif response.status_code == 404:
            logger.error("–û—à–∏–±–∫–∞ 404: –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            return None
        elif response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text[:200]}")
            return None

        return response.json()
    except requests.exceptions.Timeout:
        logger.error("–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenWeatherMap")
        return None
    except Exception as e:
        logger.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:")
        return None



def detect_storm_alerts(forecast):
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≥—Ä–æ–∑–æ–≤—ã—Ö —Ñ—Ä–æ–Ω—Ç–æ–≤"""
    alerts = []
    for hourly in forecast.get("hourly", [])[:24]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 24 —á–∞—Å–∞
        time = datetime.fromtimestamp(hourly["dt"]).strftime("%H:%M")
        weather_main = hourly["weather"][0]["main"].lower()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä–æ–∑—É
        if 'thunderstorm' in weather_main:
            alerts.append({
                "time": time,
                "alert": "‚õàÔ∏è –ì—Ä–æ–∑–æ–≤–æ–π —Ñ—Ä–æ–Ω—Ç",
                "description": hourly["weather"][0]["description"]
            })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å/—Å–Ω–µ–≥
        elif 'rain' in weather_main or 'snow' in weather_main:
            if hourly.get("pop", 0) > 0.7:  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ > 70%
                alerts.append({
                    "time": time,
                    "alert": "‚ö†Ô∏è –°–∏–ª—å–Ω—ã–µ –æ—Å–∞–¥–∫–∏",
                    "description": hourly["weather"][0]["description"]
                })

    return alerts


def generate_temperature_plot(forecast):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ 24 —á–∞—Å–∞"""
    import matplotlib.pyplot as plt
    from datetime import datetime

    hours = []
    temps = []
    for hourly in forecast["hourly"][:24]:
        hours.append(datetime.fromtimestamp(hourly["dt"]))
        temps.append(hourly["temp"])

    plt.figure(figsize=(10, 5))
    plt.plot(hours, temps, 'o-')
    plt.title(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ {STABLE_LOCATION['elevation']}–º")
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("¬∞C")
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    filename = "temp_plot.png"
    plt.savefig(filename)
    plt.close()
    return filename


def format_weather_response(weather_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    current = weather_data["current"]
    return (
        f"üå°Ô∏è –°–µ–π—á–∞—Å: {current['temp']}¬∞C\n"
        f"üßä –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {current['feels_like']}¬∞C\n"
        f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {current['weather'][0]['description'].capitalize()}\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['humidity']}%\n"
        f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {current['wind_speed']} –º/—Å\n"
        f"üå´Ô∏è –í–∏–¥–∏–º–æ—Å—Ç—å: {current.get('visibility', 10000) / 1000:.1f} –∫–º"
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        f"üèîÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã –¥–ª—è {STABLE_LOCATION['name']}.\n"
        f"üìè –í—ã—Å–æ—Ç–∞: {STABLE_LOCATION['elevation']}–º\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
        reply_markup=reply_markup
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = update.message.text
    forecast = get_weather_forecast()

    if not forecast:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if "üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞" in text:
        response = format_weather_response(forecast)
        await update.message.reply_text(response)

    elif "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞" in text:
        response = "‚è±Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞:\n\n"
        for i in range(0, 24, 3):  # –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
            hour = forecast["hourly"][i]
            time = datetime.fromtimestamp(hour["dt"]).strftime("%H:%M")
            response += f"üïí {time}: {hour['temp']}¬∞C, {hour['weather'][0]['description']}\n"
        await update.message.reply_text(response)

    elif "‚ö†Ô∏è –ì—Ä–æ–∑–æ–≤—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è" in text:
        alerts = detect_storm_alerts(forecast)
        if not alerts:
            await update.message.reply_text("‚úÖ –ì—Ä–æ–∑ –∏ —Å–∏–ª—å–Ω—ã—Ö –æ—Å–∞–¥–∫–æ–≤ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è")
        else:
            response = "üö® –ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n\n"
            for alert in alerts:
                response += f"‚è∞ {alert['time']}: {alert['alert']} ({alert['description']})\n"
            await update.message.reply_text(response)

    elif "üìä –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã" in text:
        plot_file = generate_temperature_plot(forecast)
        await update.message.reply_photo(
            photo=open(plot_file, 'rb'),
            caption=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ 24 —á–∞—Å–∞ ({STABLE_LOCATION['name']})"
        )
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import os
        os.remove(plot_file)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return
    if not OWM_API_KEY:
        logger.error("API –∫–ª—é—á OpenWeather –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞...")
    application.run_polling()


if __name__ == "__main__":
    main()