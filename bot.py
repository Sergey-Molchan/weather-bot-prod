import os
import asyncio
import aiohttp
import logging
from telegram import (
    Bot,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler
)
from datetime import datetime, timedelta
from dotenv import load_dotenv
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # –í–∫–ª—é—á–∏–º DEBUG –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_SECTOR, SELECTING_POINT, SHOWING_WEATHER = range(3)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([WEATHER_API_KEY, TELEGRAM_BOT_TOKEN, CHANNEL_ID]):
    logger.error("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    exit(1)

# –ö–æ–¥—ã –ø–æ–≥–æ–¥—ã –¥–ª—è –≥—Ä–æ–∑—ã
THUNDERSTORM_CODES = [1087, 1273, 1276, 1279, 1282]


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—É—é —Å–µ—Å—Å–∏—é aiohttp –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
class HTTPSession:
    session = None

    @classmethod
    async def get_session(cls):
        if cls.session is None or cls.session.closed:
            cls.session = aiohttp.ClientSession()
        return cls.session

    @classmethod
    async def close(cls):
        if cls.session:
            await cls.session.close()


async def get_weather_data(location: str, days: int = 1):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_API_KEY}&q={location}&days={days}&alerts=yes"

    try:
        session = await HTTPSession.get_session()
        async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
            if response.status == 200:
                return await response.json()
            logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
            return None
    except asyncio.TimeoutError:
        logger.warning("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ WeatherAPI")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return None


def check_thunderstorm(weather_data: dict):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –≥—Ä–æ–∑—ã"""
    if not weather_data or 'forecast' not in weather_data:
        return []

    alerts = []
    try:
        for day in weather_data['forecast']['forecastday']:
            for hour in day['hour']:
                if hour['condition']['code'] in THUNDERSTORM_CODES:
                    alert_time = datetime.strptime(hour['time'], "%Y-%m-%d %H:%M")
                    time_window = datetime.now() + timedelta(hours=config.ALERT_WINDOW)

                    if datetime.now() < alert_time < time_window:
                        alerts.append({
                            "time": alert_time.strftime('%H:%M %d.%m'),
                            "condition": hour['condition']['text'],
                            "chance": hour['chance_of_thunder'],
                            "precip": hour['precip_mm'],
                            "wind": hour['wind_kph']
                        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    return alerts


def format_weather_data(data: dict, point_name: str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if not data or 'current' not in data:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"

    current = data['current']
    forecast_day = data.get('forecast', {}).get('forecastday', [])
    forecast = forecast_day[0]['day'] if forecast_day else {}

    message = (
        f"üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –Ω–∞ {point_name}**\n"
        f"‚Ä¢ **–°–µ–π—á–∞—Å:** {current['temp_c']}¬∞C, {current['condition']['text']}\n"
        f"‚Ä¢ **–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:** {current['feelslike_c']}¬∞C\n"
        f"‚Ä¢ **–í–µ—Ç–µ—Ä:** {current['wind_kph']} –∫–º/—á, {current['wind_dir']}\n"
        f"‚Ä¢ **–í–ª–∞–∂–Ω–æ—Å—Ç—å:** {current['humidity']}%\n"
        f"‚Ä¢ **–û—Å–∞–¥–∫–∏:** {current['precip_mm']} –º–º\n"
    )

    if forecast:
        message += (
            f"\nüìÖ **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
            f"‚Ä¢ –ú–∞–∫—Å: {forecast.get('maxtemp_c', 'N/A')}¬∞C\n"
            f"‚Ä¢ –ú–∏–Ω: {forecast.get('mintemp_c', 'N/A')}¬∞C\n"
            f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: {forecast.get('daily_chance_of_rain', 'N/A')}%\n"
            f"‚Ä¢ –£–§-–∏–Ω–¥–µ–∫—Å: {forecast.get('uv', 'N/A')}"
        )

    alerts = check_thunderstorm(data)
    if alerts:
        message += f"\n\n‚ö†Ô∏è **–û–∂–∏–¥–∞—é—Ç—Å—è –≥—Ä–æ–∑—ã!**"
        for alert in alerts[:3]:
            message += f"\n‚ñ´Ô∏è {alert['time']} - {alert['condition']} ({alert['chance']}%)"

    return message


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.debug("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    try:
        keyboard = [
            [InlineKeyboardButton("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ–∫—Ç–æ—Ä", callback_data="sector:central")],
            [InlineKeyboardButton("–í–æ—Å—Ç–æ—á–Ω—ã–π —Å–µ–∫—Ç–æ—Ä", callback_data="sector:east")],
            [InlineKeyboardButton("–í—Å–µ —Ç–æ—á–∫–∏", callback_data="sector:all")],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–æ–∑—ã", callback_data="check_thunder")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.message:
            await update.message.reply_text(
                "üèîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:",
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.edit_message_text(
                text="üèîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:",
                reply_markup=reply_markup
            )
        return SELECTING_SECTOR
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {str(e)}")
        return ConversationHandler.END


async def sector_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    logger.debug(f"–í—ã–±—Ä–∞–Ω —Å–µ–∫—Ç–æ—Ä: {query.data}")

    try:
        sector = query.data.split(":")[1]
        context.user_data['sector'] = sector

        if sector == "central":
            locations = config.LOCATIONS_C_sector
        elif sector == "east":
            locations = config.LOCATION_East_sector
        else:
            locations = config.ALL_LOCATIONS

        keyboard = []
        for name in locations:
            keyboard.append([InlineKeyboardButton(name, callback_data=f"point:{name}")])

        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text="üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:",
            reply_markup=reply_markup
        )
        return SELECTING_POINT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ sector_selected: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return await back_to_main(update, context)


async def point_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏"""
    query = update.callback_query
    await query.answer()
    logger.debug(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–∫–∞: {query.data}")

    try:
        point_name = query.data.split(":")[1]
        context.user_data['point'] = point_name

        sector = context.user_data.get('sector', 'all')

        if sector == "central":
            locations = config.LOCATIONS_C_sector
        elif sector == "east":
            locations = config.LOCATION_East_sector
        else:
            locations = config.ALL_LOCATIONS

        coords = locations.get(point_name)

        if not coords:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ConversationHandler.END

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")

        weather_data = await get_weather_data(coords, days=3)

        if not weather_data:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
            return SELECTING_POINT

        message = format_weather_data(weather_data, point_name)

        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="tomorrow_forecast")],
            [InlineKeyboardButton("–û–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è", callback_data="weather_alerts")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ—á–∫–∞–º", callback_data="back_to_points")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return SHOWING_WEATHER
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ point_selected: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
        return await back_to_main(update, context)


async def tomorrow_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    query = update.callback_query
    await query.answer()
    logger.debug("–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")

    try:
        point_name = context.user_data.get('point')
        sector = context.user_data.get('sector', 'all')

        if sector == "central":
            locations = config.LOCATIONS_C_sector
        elif sector == "east":
            locations = config.LOCATION_East_sector
        else:
            locations = config.ALL_LOCATIONS

        coords = locations.get(point_name)

        if not coords:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ConversationHandler.END

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...")

        weather_data = await get_weather_data(coords, days=3)

        if not weather_data or len(weather_data.get('forecast', {}).get('forecastday', [])) < 2:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
            return SHOWING_WEATHER

        tomorrow = weather_data['forecast']['forecastday'][1]['day']
        date = weather_data['forecast']['forecastday'][1]['date']

        message = (
            f"üìÖ **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({date}) –¥–ª—è {point_name}**\n"
            f"‚Ä¢ –ú–∞–∫—Å: {tomorrow['maxtemp_c']}¬∞C\n"
            f"‚Ä¢ –ú–∏–Ω: {tomorrow['mintemp_c']}¬∞C\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {tomorrow['avgtemp_c']}¬∞C\n"
            f"‚Ä¢ –û—Å–∞–¥–∫–∏: {tomorrow['totalprecip_mm']} –º–º\n"
            f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: {tomorrow['daily_chance_of_rain']}%\n"
            f"‚Ä¢ –£–§-–∏–Ω–¥–µ–∫—Å: {tomorrow['uv']}\n"
            f"‚Ä¢ –£—Å–ª–æ–≤–∏—è: {tomorrow['condition']['text']}"
        )

        await query.edit_message_text(
            text=message,
            parse_mode="Markdown"
        )
        return SHOWING_WEATHER
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ tomorrow_forecast: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        return SHOWING_WEATHER


async def weather_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    logger.debug("–ó–∞–ø—Ä–æ—Å –æ–ø–∞—Å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π")

    try:
        point_name = context.user_data.get('point')
        sector = context.user_data.get('sector', 'all')

        if sector == "central":
            locations = config.LOCATIONS_C_sector
        elif sector == "east":
            locations = config.LOCATION_East_sector
        else:
            locations = config.ALL_LOCATIONS

        coords = locations.get(point_name)

        if not coords:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ConversationHandler.END

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await query.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è...")

        weather_data = await get_weather_data(coords, days=2)

        if not weather_data:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
            return SHOWING_WEATHER

        alerts = check_thunderstorm(weather_data)

        if alerts:
            message = f"‚ö°Ô∏è **–û–ø–∞—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è –Ω–∞ {point_name}:**\n"
            for alert in alerts:
                message += (
                    f"\n‚ñ´Ô∏è {alert['time']}: {alert['condition']}\n"
                    f"  - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≥—Ä–æ–∑—ã: {alert['chance']}%\n"
                    f"  - –û—Å–∞–¥–∫–∏: {alert['precip']} –º–º/—á\n"
                    f"  - –í–µ—Ç–µ—Ä: {alert['wind']} –∫–º/—á\n"
                )
        else:
            message = f"‚úÖ –ù–∞ {point_name} –æ–ø–∞—Å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ {config.ALERT_WINDOW} —á–∞—Å–æ–≤"

        await query.edit_message_text(
            text=message,
            parse_mode="Markdown"
        )
        return SHOWING_WEATHER
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ weather_alerts: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–∞—Å–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π.")
        return SHOWING_WEATHER


async def back_to_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ—á–µ–∫"""
    query = update.callback_query
    await query.answer()
    logger.debug("–í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–æ—á–∫–∞–º")

    try:
        sector = context.user_data.get('sector', 'all')

        if sector == "central":
            locations = config.LOCATIONS_C_sector
        elif sector == "east":
            locations = config.LOCATION_East_sector
        else:
            locations = config.ALL_LOCATIONS

        keyboard = []
        for name in locations:
            keyboard.append([InlineKeyboardButton(name, callback_data=f"point:{name}")])

        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text="üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:",
            reply_markup=reply_markup
        )
        return SELECTING_POINT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_points: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        return await back_to_main(update, context)


async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    logger.debug("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    try:
        query = update.callback_query
        if query:
            await query.answer()

        context.user_data.clear()

        keyboard = [
            [InlineKeyboardButton("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ–∫—Ç–æ—Ä", callback_data="sector:central")],
            [InlineKeyboardButton("–í–æ—Å—Ç–æ—á–Ω—ã–π —Å–µ–∫—Ç–æ—Ä", callback_data="sector:east")],
            [InlineKeyboardButton("–í—Å–µ —Ç–æ—á–∫–∏", callback_data="sector:all")],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–æ–∑—ã", callback_data="check_thunder")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if query:
            await query.edit_message_text(
                text="üèîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üèîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:",
                reply_markup=reply_markup
            )

        return SELECTING_SECTOR
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_main: {str(e)}")
        return ConversationHandler.END


async def check_thunder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–æ–∑ –≤–æ –≤—Å–µ—Ö —Ç–æ—á–∫–∞—Ö"""
    query = update.callback_query
    await query.answer()
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–æ–∑ –≤–æ –≤—Å–µ—Ö —Ç–æ—á–∫–∞—Ö")

    try:
        await query.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ —Ç–æ—á–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥—Ä–æ–∑...")

        results = []
        for name, coords in config.ALL_LOCATIONS.items():
            try:
                data = await get_weather_data(coords)
                alerts = check_thunderstorm(data) if data else []

                if alerts:
                    result = f"‚ö°Ô∏è *{name}:*"
                    for alert in alerts:
                        result += f"\n‚ñ´Ô∏è {alert['time']} - {alert['condition']} ({alert['chance']}%)"
                    results.append(result)
                else:
                    results.append(f"‚úÖ *{name}:* –ì—Ä–æ–∑—ã –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è")

                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            except Exception as e:
                results.append(f"‚ùå *{name}:* –û—à–∏–±–∫–∞ ({str(e)})")

        message = "*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–æ–∑:*\n\n" + "\n\n".join(results)

        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text=message,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        return SELECTING_SECTOR
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_thunder: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä–æ–∑.")
        return await back_to_main(update, context)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.edit_message_text("‚ùå –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω")
        else:
            await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω")

        context.user_data.clear()
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {str(e)}")
        return ConversationHandler.END


async def shutdown(application: Application) -> None:
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    await HTTPSession.close()
    logger.info("–†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                SELECTING_SECTOR: [
                    CallbackQueryHandler(sector_selected, pattern=r"^sector:"),
                    CallbackQueryHandler(check_thunder, pattern=r"^check_thunder$"),
                    CallbackQueryHandler(back_to_main, pattern=r"^back_to_main$")
                ],
                SELECTING_POINT: [
                    CallbackQueryHandler(point_selected, pattern=r"^point:"),
                    CallbackQueryHandler(back_to_main, pattern=r"^back_to_main$")
                ],
                SHOWING_WEATHER: [
                    CallbackQueryHandler(tomorrow_forecast, pattern=r"^tomorrow_forecast$"),
                    CallbackQueryHandler(weather_alerts, pattern=r"^weather_alerts$"),
                    CallbackQueryHandler(back_to_points, pattern=r"^back_to_points$"),
                    CallbackQueryHandler(back_to_main, pattern=r"^back_to_main$")
                ]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )

        application.add_handler(conv_handler)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        application.run_polling()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        try:
            loop = asyncio.get_event_loop()
            if loop.is_running():
                loop.create_task(HTTPSession.close())
            else:
                loop.run_until_complete(HTTPSession.close())
            logger.info("HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {str(e)}")


if __name__ == "__main__":
    main()
